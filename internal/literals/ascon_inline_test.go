// Copyright (c) 2025, The Garble Authors.
// See LICENSE for licensing information.

package literals

import (
	"go/ast"
	"go/parser"
	"go/token"
	mathrand "math/rand"
	"testing"
)

func TestAsconInlineCodeGeneration(t *testing.T) {
	rand := mathrand.New(mathrand.NewSource(42))

	// Simple name provider for testing
	nameProvider := func(r *mathrand.Rand, baseName string) string {
		return baseName
	}

	helper := newAsconInlineHelper(rand, nameProvider)

	// Generate the inline ASCON code
	code := helper.generateInlineAsconCode()

	// Verify it's valid Go code by parsing it
	fset := token.NewFileSet()
	_, err := parser.ParseFile(fset, "test.go", "package test\n"+code, 0)
	if err != nil {
		t.Fatalf("Generated ASCON code is invalid Go: %v\n%s", err, code)
	}

	// Verify function name is in the code
	if helper.funcName != "_garbleAsconDecrypt" {
		t.Errorf("Expected function name '_garbleAsconDecrypt', got '%s'", helper.funcName)
	}

	t.Logf("Generated inline ASCON code (%d bytes):\n%s", len(code), code)
}

func TestAsconInlineEncryption(t *testing.T) {
	rand := mathrand.New(mathrand.NewSource(42))

	nameProvider := func(r *mathrand.Rand, baseName string) string {
		return baseName
	}

	helper := newAsconInlineHelper(rand, nameProvider)
	helper.inserted = true // Mark as inserted so we can use encryption methods

	tests := []struct {
		name  string
		input string
	}{
		{"empty", ""},
		{"single_char", "x"},
		{"short", "hello"},
		{"medium", "The quick brown fox jumps over the lazy dog"},
		{"with_special", "Test\n\t\"with\\special"},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Generate encrypted string literal expression
			expr := helper.encryptStringLiteral(tt.input)

			// Verify it's a valid AST node
			if expr == nil {
				t.Fatal("Generated nil expression")
			}

			// Verify it's a CallExpr (should be string(decrypt(...)[0]))
			_, ok := expr.(*ast.CallExpr)
			if !ok {
				t.Errorf("Expected CallExpr, got %T", expr)
			}

			t.Logf("Generated expression for '%s'", tt.input)
		})
	}
}

func TestAsconInlineByteSlice(t *testing.T) {
	rand := mathrand.New(mathrand.NewSource(42))

	nameProvider := func(r *mathrand.Rand, baseName string) string {
		return baseName
	}

	helper := newAsconInlineHelper(rand, nameProvider)
	helper.inserted = true

	tests := []struct {
		name    string
		data    []byte
		pointer bool
	}{
		{"empty", []byte{}, false},
		{"single_byte", []byte{0x42}, false},
		{"multiple", []byte{0x01, 0x02, 0x03, 0x04}, false},
		{"pointer", []byte{0xAA, 0xBB}, true},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			expr := helper.encryptByteSlice(tt.data, tt.pointer)

			if expr == nil {
				t.Fatal("Generated nil expression")
			}

			if tt.pointer {
				_, ok := expr.(*ast.UnaryExpr)
				if !ok {
					t.Errorf("Expected UnaryExpr for pointer, got %T", expr)
				}
			}

			t.Logf("Generated byte slice expression (pointer=%v)", tt.pointer)
		})
	}
}

func TestAsconInlineByteArray(t *testing.T) {
	rand := mathrand.New(mathrand.NewSource(42))

	nameProvider := func(r *mathrand.Rand, baseName string) string {
		return baseName
	}

	helper := newAsconInlineHelper(rand, nameProvider)
	helper.inserted = true

	tests := []struct {
		name    string
		data    []byte
		length  int64
		pointer bool
	}{
		{"small_array", []byte{0x01, 0x02, 0x03}, 3, false},
		{"16_byte_array", make([]byte, 16), 16, false},
		{"array_pointer", []byte{0xAA, 0xBB, 0xCC, 0xDD}, 4, true},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			expr := helper.encryptByteArray(tt.data, tt.length, tt.pointer)

			if expr == nil {
				t.Fatal("Generated nil expression")
			}

			if tt.pointer {
				_, ok := expr.(*ast.UnaryExpr)
				if !ok {
					t.Errorf("Expected UnaryExpr for pointer, got %T", expr)
				}
			} else {
				_, ok := expr.(*ast.CallExpr)
				if !ok {
					t.Errorf("Expected CallExpr for array, got %T", expr)
				}
			}

			t.Logf("Generated byte array expression (length=%d, pointer=%v)", tt.length, tt.pointer)
		})
	}
}

// BenchmarkAsconInlineCodeGeneration measures code generation performance
func BenchmarkAsconInlineCodeGeneration(b *testing.B) {
	rand := mathrand.New(mathrand.NewSource(42))
	nameProvider := func(r *mathrand.Rand, baseName string) string {
		return baseName
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		helper := newAsconInlineHelper(rand, nameProvider)
		_ = helper.generateInlineAsconCode()
	}
}

// BenchmarkAsconInlineEncryption measures encryption performance
func BenchmarkAsconInlineEncryption(b *testing.B) {
	rand := mathrand.New(mathrand.NewSource(42))
	nameProvider := func(r *mathrand.Rand, baseName string) string {
		return baseName
	}

	testData := "The quick brown fox jumps over the lazy dog"

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		helper := newAsconInlineHelper(rand, nameProvider)
		helper.inserted = true
		_ = helper.encryptStringLiteral(testData)
	}
}
